{"version":3,"sources":["services/Api.js","services/hackerNewsApi.js","store/story/actions.js","store/story/reducer.js","store/reducer.js","store/middleware.js","store/index.js","utils/getArticleLink.js","components/ListItem/index.js","components/List/index.js","components/App/App.js","store/story/selectors.js","components/App/index.js","serviceWorker.js","index.js"],"names":["API_ROOT","process","URL","TIMEOUT","HEADERS","Accept","client","baseURL","timeout","headers","auth","axios","create","interceptors","response","use","this","handleSuccess","handleError","error","Promise","reject","path","get","then","data","payload","post","put","patch","delete","hackerNewsApi","getTopStoryIds","getStory","id","getStoriesByPage","ids","page","limit","begin","end","getPageSlice","storyPromises","items","slice","getPageValues","map","all","NS","actionTypes","FETCH_STORY_IDS_REQUEST","FETCH_STORY_IDS_SUCCESS","FETCH_STORY_IDS_FAILURE","FETCH_STORIES_REQUEST","FETCH_STORIES_SUCCESS","FETCH_STORIES_FAILURE","action","type","actions","fetchStoryIds","dispatch","storyIds","fetchStories","catch","err","stories","story","state","isFetching","rootReducer","combineReducers","middlewareList","push","thunk","middleware","compose","applyMiddleware","configureStore","initialState","createStore","reducer","HN_ROOT","HN_ITEM","getArticleLink","url","commentUrl","ListItem","title","articleUrl","className","href","target","rel","List","key","App","props","fetchStoriesFirstPage","hasMoreStories","dataLength","length","next","hasMore","loader","style","height","overflow","Component","hasMoreStoriesSelector","createSelector","connect","Boolean","window","location","hostname","match","store","ReactDOM","render","document","getElementById","renderApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAGMA,EAAWC,+DAAYC,KAAO,yBAC9BC,EAAU,IACVC,EAAU,CACZ,eAAgB,mBAChBC,OAAQ,oBCHNC,EAAS,I,WDOX,cAAiF,IAAD,IAAlEC,eAAkE,MAAxDP,EAAwD,MAA9CQ,eAA8C,MAApCL,EAAoC,MAA3BM,eAA2B,MAAjBL,EAAiB,EAARM,EAAQ,EAARA,KAAQ,oBAC5E,IAAMJ,EAASK,IAAMC,OAAO,CACxBL,UACAC,UACAC,UACAC,SAGJJ,EAAOO,aAAaC,SAASC,IAAIC,KAAKC,cAAeD,KAAKE,aAC1DF,KAAKV,OAASA,E,0DAGJQ,GACV,OAAOA,I,kCAGCK,GACR,OAAOC,QAAQC,OAAOF,K,0BAGtBG,GACA,OAAON,KAAKV,OAAOiB,IAAID,GAAME,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,2BAGtDH,EAAMI,GACP,OAAOV,KAAKV,OAAOqB,KAAKL,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,0BAGjEH,EAAMI,GACN,OAAOV,KAAKV,OAAOsB,IAAIN,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,4BAG9DH,EAAMI,GACR,OAAOV,KAAKV,OAAOuB,MAAMP,EAAMI,GAASF,MAAK,SAAAV,GAAQ,OAAIA,EAASW,U,6BAG/DH,GACH,OAAON,KAAKV,OAAOwB,OAAOR,GAAME,MAAK,SAAAV,GAAQ,OAAIA,EAASW,Y,KC5CnD,CAAe,CAAElB,QADf,0CAGXwB,EAAgB,GAMtBA,EAAcC,eAAiB,kBAAM1B,EAAOiB,IAAP,qBAVlB,wBAWnBQ,EAAcE,SAAW,SAAAC,GAAE,OAAI5B,EAAOiB,IAAP,gBAAoBW,GAApB,OAXZ,wBAYnBH,EAAcI,iBAAmB,SAACC,EAAKC,GAAU,IAAD,EAL3B,SAACC,GAAD,IAAQD,EAAR,uDAAe,EAAf,MAAsB,CAAEE,MAAOF,EAAOC,EAAOE,KAAMH,EAAO,GAAKC,GAMzDG,CAPR,GAOiCJ,GAE1CK,EAPY,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,SAAeG,MAAkBC,MAAML,EAAOC,GAM9CK,CAAc,CAAEN,MAFU,EACpCA,MACiCC,IAFG,EAC7BA,IAC+BG,MAAOP,IACrBU,KAAI,SAAAZ,GAAE,OAAIH,EAAcE,SAASC,MACjE,OAAOd,QAAQ2B,IAAIL,IAGRX,QCnBTiB,EAAK,kBAEEC,EAAc,CACvBC,wBAAwB,GAAD,OAAKF,EAAL,4BACvBG,wBAAwB,GAAD,OAAKH,EAAL,4BACvBI,wBAAwB,GAAD,OAAKJ,EAAL,4BACvBK,sBAAsB,GAAD,OAAKL,EAAL,0BACrBM,sBAAsB,GAAD,OAAKN,EAAL,0BACrBO,sBAAsB,GAAD,OAAKP,EAAL,2BAGnBQ,EAAS,SAACC,EAAM/B,GAAP,MAAoB,CAAE+B,OAAM/B,YAErCgC,EAAU,CACZC,cAAe,WAAmB,IAAlBjC,EAAiB,uDAAP,GACtB,OAAO,SAAAkC,GAGH,OAFAA,EAASJ,EAAOP,EAAYC,wBAAyBxB,IAE9CK,EACFC,iBACAR,MAAK,SAAAqC,GACFD,EAASJ,EAAOP,EAAYE,wBAAyB,CAAEU,cACvDD,EAASF,EAAQI,aAAa,CAAED,WAAUxB,KAAM,QAEnD0B,OAAM,SAAAC,GAAG,OAAIJ,EAASJ,EAAOP,EAAYG,wBAAyBY,SAG/EF,aAAc,WAAmB,IAAlBpC,EAAiB,uDAAP,GACrB,OAAO,SAAAkC,GAAa,IACRC,EAAmBnC,EAAnBmC,SAAUxB,EAASX,EAATW,KAIlB,OAFAuB,EAASJ,EAAOP,EAAYI,sBAAuB3B,IAE5CK,EACFI,iBAAiB0B,EAAUxB,GAC3Bb,MAAK,SAAAyC,GAAO,OAAIL,EAASJ,EAAOP,EAAYK,sBAAuB,CAAEW,gBACrEF,OAAM,SAAAC,GAAG,OAAIJ,EAASJ,EAAOP,EAAYM,sBAAuBS,UAKlEN,ICRAQ,EAzBD,WAAmD,IAAlDC,EAAiD,uDARjC,CAC3BN,SAAU,GACVI,QAAS,GACT5B,KAAM,EACN+B,YAAY,EACZjD,MAAO,IAGqD,yCAApBsC,EAAoB,EAApBA,KAAM/B,EAAc,EAAdA,QAC9C,OAAQ+B,GACJ,KAAKR,EAAYC,wBACjB,KAAKD,EAAYI,sBACb,OAAO,eACAc,EADP,CAEIC,YAAY,IAEpB,KAAKnB,EAAYE,wBACb,OAAO,eACAgB,EADP,GAEOzC,GAEX,KAAKuB,EAAYK,sBACb,OAAO,eACAa,EADP,CAEIF,QAAQ,GAAD,mBAAME,EAAMF,SAAZ,YAAwBvC,EAAQuC,UACvC5B,KAAM8B,EAAM9B,KAAO,EACnB+B,YAAY,IAEpB,QACI,OAAOD,ICxBJE,EAJKC,YAAgB,CAChCJ,U,QCCEK,G,MAAiB,IAEvBA,EAAeC,KAAKC,KAKpB,IAEeC,EAFIC,YAAQC,IAAe,WAAf,EAAmBL,ICH/BM,EALQ,SAAAC,GAEnB,OADcC,YAAYC,EAASF,EAAcJ,I,wDCL/CO,EAAU,+BACHC,EAAO,UAAMD,EAAN,aASLE,GARK,UAAMF,EAAN,aAEG,SAAC,GAAiB,IAAfG,EAAc,EAAdA,IAAKlD,EAAS,EAATA,GACrBmD,EAAU,UAAMH,GAAN,OAAgBhD,GAEhC,OADekD,GAAYC,ICShBC,G,MAXE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOH,EAAc,EAAdA,IAAKlD,EAAS,EAATA,GACtBsD,EAAaL,EAAe,CAAEC,MAAKlD,OAEzC,OACI,yBAAKuD,UAAU,UACVF,EACD,uBAAGE,UAAU,eAAeC,KAAMF,EAAYG,OAAO,SAASC,IAAI,uBAAlE,gBCCGC,EARF,SAAC,GAAD,IAAG5B,EAAH,EAAGA,QAAH,OACT,6BACKA,EAAQnB,KAAI,SAAAoB,GAAK,OACd,kBAAC,EAAD,eAAU4B,IAAK5B,EAAMhC,IAAQgC,S,QCkC1B6B,G,iNA7BXjC,aAAe,WAAO,IAAD,EACoC,EAAKkC,MAAlDnC,EADS,EACTA,SAAUxB,EADD,EACCA,KAAMyB,EADP,EACOA,aADP,EACqBM,YAElCN,EAAa,CAAED,WAAUxB,U,mFAN7BrB,KAAKgF,MAAMC,0B,+BAUL,IAAD,EAC+BjF,KAAKgF,MAAjC/B,EADH,EACGA,QAASiC,EADZ,EACYA,eACjB,OACI,6BACI,yBAAKT,UAAU,eAAf,kBACA,kBAAC,IAAD,CACIU,WAAYlC,EAAQmC,OACpBC,KAAMrF,KAAK8C,aACXwC,QAASJ,EACTK,OAAQ,aACRC,MAAO,CACHC,OAAQ,OACRC,SAAU,YAGd,kBAAC,EAAD,CAAMzC,QAASA,U,GA3BjB0C,c,QCDLC,EAAyBC,aAHb,SAAA1C,GAAK,OAAIA,EAAMD,MAAML,YACtB,SAAAM,GAAK,OAAIA,EAAMD,MAAMD,WAKzC,SAACJ,EAAUI,GAAX,OAAuBJ,EAASuC,OAASnC,EAAQmC,UCUtCU,eAbS,SAAA3C,GAAK,MAAK,CAC9B+B,eAAgBU,EAAuBzC,GACvCF,QAASE,EAAMD,MAAMD,QACrB5B,KAAM8B,EAAMD,MAAM7B,KAClBwB,SAAUM,EAAMD,MAAML,SACtBO,WAAYD,EAAMD,MAAME,eAGD,SAAAR,GAAQ,MAAK,CACpCqC,sBAAuB,kBAAMrC,EAASF,EAAQC,kBAC9CG,aAAc,gBAAGD,EAAH,EAAGA,SAAUxB,EAAb,EAAaA,KAAb,OAAwBuB,EAASF,EAAQI,aAAa,CAACD,WAAUxB,cAGpEyE,CAGbf,GCTkBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DCXY,WACd,IAAMC,EAAQvC,EAAe,IAO7BwC,IAASC,OACL,kBAAC,IAAD,CAAUF,MAAOA,GACb,6BACI,kBAAC,EAAD,QAGRG,SAASC,eAAe,SAIhCC,GD0GM,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpG,MAAK,SAAAqG,GACjCA,EAAaC,kB","file":"static/js/main.c79dd7f7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// Default API will be your root\r\nconst API_ROOT = process.env.URL || 'http://localhost:3000/';\r\nconst TIMEOUT = 20000;\r\nconst HEADERS = {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n};\r\n\r\nclass ApiService {\r\n    constructor({ baseURL = API_ROOT, timeout = TIMEOUT, headers = HEADERS, auth }) {\r\n        const client = axios.create({\r\n            baseURL,\r\n            timeout,\r\n            headers,\r\n            auth,\r\n        });\r\n\r\n        client.interceptors.response.use(this.handleSuccess, this.handleError);\r\n        this.client = client;\r\n    }\r\n\r\n    handleSuccess(response) {\r\n        return response;\r\n    }\r\n\r\n    handleError(error) {\r\n        return Promise.reject(error);\r\n    }\r\n\r\n    get(path) {\r\n        return this.client.get(path).then(response => response.data);\r\n    }\r\n\r\n    post(path, payload) {\r\n        return this.client.post(path, payload).then(response => response.data);\r\n    }\r\n\r\n    put(path, payload) {\r\n        return this.client.put(path, payload).then(response => response.data);\r\n    }\r\n\r\n    patch(path, payload) {\r\n        return this.client.patch(path, payload).then(response => response.data);\r\n    }\r\n\r\n    delete(path) {\r\n        return this.client.delete(path).then(response => response.data);\r\n    }\r\n}\r\n\r\nexport default ApiService;","import ApiService from './Api';\r\n\r\nconst JSON_QUERY = '.json?print=pretty';\r\nconst BASE_URL = 'https://hacker-news.firebaseio.com/v0';\r\nconst client = new ApiService({ baseURL: BASE_URL });\r\n\r\nconst hackerNewsApi = {};\r\n\r\nconst PAGE_LIMIT = 20;\r\nconst getPageSlice = (limit, page = 0) => ({ begin: page * limit, end: (page + 1) * limit });\r\nconst getPageValues = ({ begin, end, items }) => items.slice(begin, end);\r\n\r\nhackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\r\nhackerNewsApi.getStory = id => client.get(`/item/${id}${JSON_QUERY}`);\r\nhackerNewsApi.getStoriesByPage = (ids, page) => {\r\n    const { begin, end } = getPageSlice(PAGE_LIMIT, page);\r\n    const activeIds = getPageValues({ begin, end, items: ids });\r\n    const storyPromises = activeIds.map(id => hackerNewsApi.getStory(id));\r\n    return Promise.all(storyPromises);\r\n};\r\n\r\nexport default hackerNewsApi;","import hackerNewsApi from '../../services/hackerNewsApi';\r\n\r\nconst NS = '@hnReader/story';\r\n\r\nexport const actionTypes = {\r\n    FETCH_STORY_IDS_REQUEST: `${NS}/FETCH_STORY_IDS_REQUEST`,\r\n    FETCH_STORY_IDS_SUCCESS: `${NS}/FETCH_STORY_IDS_SUCCESS`,\r\n    FETCH_STORY_IDS_FAILURE: `${NS}/FETCH_STORY_IDS_FAILURE`,\r\n    FETCH_STORIES_REQUEST: `${NS}/FETCH_STORIES_REQUEST`,\r\n    FETCH_STORIES_SUCCESS: `${NS}/FETCH_STORIES_SUCCESS`,\r\n    FETCH_STORIES_FAILURE: `${NS}/FETCH_STORIES_FAILURE`,\r\n};\r\n\r\nconst action = (type, payload) => ({ type, payload });\r\n\r\nconst actions = {\r\n    fetchStoryIds: (payload = {}) => {\r\n        return dispatch => {\r\n            dispatch(action(actionTypes.FETCH_STORY_IDS_REQUEST, payload));\r\n\r\n            return hackerNewsApi\r\n                .getTopStoryIds()\r\n                .then(storyIds => {\r\n                    dispatch(action(actionTypes.FETCH_STORY_IDS_SUCCESS, { storyIds }));\r\n                    dispatch(actions.fetchStories({ storyIds, page: 0 }));\r\n                })\r\n                .catch(err => dispatch(action(actionTypes.FETCH_STORY_IDS_FAILURE, err)));\r\n        };\r\n    },\r\n    fetchStories: (payload = {}) => {\r\n        return dispatch => {\r\n            const { storyIds, page } = payload;\r\n\r\n            dispatch(action(actionTypes.FETCH_STORIES_REQUEST, payload));\r\n\r\n            return hackerNewsApi\r\n                .getStoriesByPage(storyIds, page)\r\n                .then(stories => dispatch(action(actionTypes.FETCH_STORIES_SUCCESS, { stories })))\r\n                .catch(err => dispatch(action(actionTypes.FETCH_STORIES_FAILURE, err)));\r\n        };\r\n    },\r\n};\r\n\r\nexport default actions;","import { actionTypes } from './actions';\r\n\r\nconst getInitialState = () => ({\r\n    storyIds: [],\r\n    stories: [],\r\n    page: 0,\r\n    isFetching: false,\r\n    error: '',\r\n});\r\n\r\nconst story = (state = getInitialState(), { type, payload }) => {\r\n    switch (type) {\r\n        case actionTypes.FETCH_STORY_IDS_REQUEST:\r\n        case actionTypes.FETCH_STORIES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            };\r\n        case actionTypes.FETCH_STORY_IDS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            };\r\n        case actionTypes.FETCH_STORIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                stories: [...state.stories, ...payload.stories],\r\n                page: state.page + 1,\r\n                isFetching: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default story;","import { combineReducers } from 'redux';\r\nimport story from './story/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    story\r\n});\r\n\r\nexport default rootReducer;","import { applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst isProd = process.env.NODE_ENV === 'production';\r\nconst middlewareList = [];\r\n\r\nmiddlewareList.push(thunk);\r\nif (!isProd) {\r\n    middlewareList.push(createLogger());\r\n}\r\n\r\nconst middleware = compose(applyMiddleware(...middlewareList));\r\n\r\nexport default middleware;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\nimport middleware from './middleware';\r\n\r\nconst configureStore = initialState => {\r\n    const store = createStore(reducer, initialState, middleware);\r\n    return store;\r\n};\r\n\r\nexport default configureStore;","const HN_ROOT = 'https://news.ycombinator.com';\r\nexport const HN_ITEM = `${HN_ROOT}/item?id=`;\r\nexport const HN_USER = `${HN_ROOT}/user?id=`;\r\n\r\nconst getArticleLink = ({ url, id }) => {\r\n    const commentUrl = `${HN_ITEM}${id}`;\r\n    const link = !!url ? url : commentUrl;\r\n    return link;\r\n};\r\n\r\nexport default getArticleLink;","import React from 'react';\r\nimport getArticleLink from '../../utils/getArticleLink';\r\nimport './styling.css'\r\n\r\nconst ListItem = ({ title, url, id }) => {\r\n    const articleUrl = getArticleLink({ url, id });\r\n\r\n    return (\r\n        <div className=\"titles\">\r\n            {title}\r\n            <a className=\"article-link\" href={articleUrl} target=\"_blank\" rel=\"noopener noreferrer\">Read More</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from '../ListItem';\r\n\r\nconst List = ({ stories }) => (\r\n    <div>\r\n        {stories.map(story => (\r\n            <ListItem key={story.id} {...story} />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport List from '../List';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './styling.css';\n\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.fetchStoriesFirstPage();\r\n    }\n\n    fetchStories = () => {\n        const { storyIds, page, fetchStories, isFetching } = this.props;\r\n        if (!isFetching) {\r\n            fetchStories({ storyIds, page });\r\n        }\r\n    };\n\n    render() {\n        const { stories, hasMoreStories } = this.props;\r\n        return (\r\n            <div>\r\n                <div className=\"page-header\">The News Stand</div>\r\n                <InfiniteScroll\r\n                    dataLength={stories.length}\r\n                    next={this.fetchStories}\r\n                    hasMore={hasMoreStories}\r\n                    loader={'LOADING...'}\r\n                    style={{\r\n                        height: '100%',\r\n                        overflow: 'visible'\r\n                    }}\r\n                >\r\n                    <List stories={stories} />\r\n                </InfiniteScroll>\r\n            </div>\r\n        );\r\n    }\n}\n\nexport default App;\n","import { createSelector } from 'reselect';\r\n\r\nconst storyIdsSelector = state => state.story.storyIds;\r\nconst storiesSelector = state => state.story.stories;\r\n\r\nexport const hasMoreStoriesSelector = createSelector(\r\n    storyIdsSelector,\r\n    storiesSelector,\r\n    (storyIds, stories) => storyIds.length > stories.length\r\n);","import { connect } from 'react-redux';\nimport actions from '../../store/story/actions';\nimport App from './App';\nimport { hasMoreStoriesSelector } from '../../store/story/selectors';\n\nconst mapStateToProps = state => ({\n    hasMoreStories: hasMoreStoriesSelector(state),\n    stories: state.story.stories,\r\n    page: state.story.page,\r\n    storyIds: state.story.storyIds,\r\n    isFetching: state.story.isFetching\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchStoriesFirstPage: () => dispatch(actions.fetchStoryIds()),\r\n    fetchStories: ({ storyIds, page }) => dispatch(actions.fetchStories({storyIds, page}))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Provider } from 'react-redux';\nimport configureStore from './store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderApp = () => {\n    const store = configureStore({});\n\n    if (process.env.NODE_ENV !== 'production') {\n        console.log('Initial state ->');\r\n        console.log(store.getState());\r\n    }\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <div>\n                <App />\n            </div>\n        </Provider>,\n        document.getElementById('root')\n    );\n};\n\nrenderApp();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}